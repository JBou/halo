apply plugin: 'base'
apply plugin: 'eclipse'
apply plugin: 'org.sonarqube'
apply from: 'libraries.gradle'
apply from: 'resources/eclipse-prefs/eclipse.gradle'

buildscript {
    repositories {
        mavenCentral()
    }
    
    dependencies {
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.1'
    }
}

allprojects {
    repositories {
        mavenCentral()
    }

    apply plugin: 'jacoco'
    jacoco { toolVersion = '0.8.0' }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    test {
        testLogging.showStandardStreams = true
    }

    jar {
        /* include source */
        from (sourceSets.main.allSource.getSrcDirTrees())

        /* include resources */
        into('resources') {
            from 'resources'
        }
    }

    javadoc {
       options.memberLevel = JavadocMemberLevel.PUBLIC
    }

    /* remove all transitive dependencies for compilation. */
    [configurations.compile, configurations.compileClasspath, configurations.compileOnly]*.transitive = false

    /* Modify the Eclipse project settings. */
    eclipse { jdt { file { withProperties eclipsePrefs } } }

    task ('copyEclipsePrefs', type: Copy) {
        from rootProject.file('resources/eclipse-prefs/org.eclipse.jdt.ui.prefs')
        into "${projectDir}/.settings"
    }
    tasks.eclipse.finalizedBy copyEclipsePrefs
}

task codeCoverageReport(type: JacocoReport) {
    group 'Verification'
    description 'Generates code coverage report for this project.'

    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination "${buildDir}/reports/jacoco/report.xml"
        html.enabled false
        csv.enabled false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}

task allJavadocs(type: Javadoc) {
	group = "Documentation"
	description = "Generates aggregated Javadocs"
	title = "Localhost ${version} API"

	setDependsOn subprojects.collect { it.tasks.getByName("jar") }

	options.memberLevel = JavadocMemberLevel.PUBLIC
	options.use = true
	options.splitIndex = true
	options.addStringOption('Xdoclint:none', '-quiet')
	options.addMultilineStringsOption('tag').setValue(['apiNote:a:API Note:', 'implSpec:a:Implementation Requirements:', 'implNote:a:Implementation Note:'])
	options.encoding = 'UTF-8'
	options.jFlags '-Xmx1g'
	options.links(
		'https://docs.oracle.com/javase/8/docs/api/',
	)
	options
		.group("Halo", ["io.omam.Halo.*"])

	setSource subprojects.collect { it.sourceSets.main.allJava }

	maxMemory = "1024m"
	destinationDir = new File(buildDir, "docs/javadoc")
	classpath = files(subprojects.collect { it.sourceSets.main.compileClasspath })
}

task wrapper(type: Wrapper) {
	description = 'Generates gradlew and gradlew.bat scripts'
	gradleVersion = '4.5'
	distributionType = Wrapper.DistributionType.BIN
}
