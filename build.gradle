apply plugin: 'base'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'signing'
apply from: 'resources/eclipse/eclipse.gradle'

repositories {
    mavenCentral()
}

if (project.hasProperty('enableJaCoCo')) {
    apply plugin: 'jacoco'
    jacoco { toolVersion = '0.8.5' }
}

apply plugin: 'java-library'
apply plugin: 'eclipse'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

dependencies {
    testImplementation(
        'io.cucumber:cucumber-java:5.6.0',
        'io.cucumber:cucumber-picocontainer:5.6.0',
        'org.junit.jupiter:junit-jupiter-api:5.6.1',
        'org.awaitility:awaitility:4.0.2',
        'org.jmdns:jmdns:3.5.5',
        'org.slf4j:slf4j-jdk14:1.7.30'
    )
}

// use cucumberTest instead
test {
    exclude '**'
}

task cucumberTest(type: JavaExec, dependsOn: [compileTestJava]) {
    group 'Verification'
    description 'Runs the cucumber tests.'

    outputs.upToDateWhen { false }

    classpath = sourceSets.test.runtimeClasspath

    main = 'io.cucumber.core.cli.Main'

    jvmArgs("-Djava.util.logging.config.file=${projectDir}/src/test/resources/logging.properties") 
    
    args = [
        '--strict',
        '--glue', 'io.omam.halo',
        '--plugin', 'pretty',
        '--plugin', 'json:' + "${buildDir}" + '/reports/cucumberTests/halo-tests.json',
        "${projectDir}/src/test/resources/io/"
    ]

}

if (project.hasProperty('enableJaCoCo')) {
    jacoco {
        applyTo cucumberTest
    }

    task jacocoCucumberTestReport(type: JacocoReport) {
        group 'Verification'
        description 'Generates code coverage report for the cucumberTest task.'

        outputs.upToDateWhen { false }

        executionData(files("${buildDir}/jacoco/cucumberTest.exec"))

        reports {
            html.enabled = true
            xml.enabled = true
        }
    }
}

if (Integer.valueOf(JavaVersion.current().getMajorVersion()) > 8) {
    // --release 8: configures the compiler to produce class files that will link against version 8
    compileJava.options.compilerArgs += ['--release', 8]
}

compileJava.options.encoding = 'UTF-8'
compileJava.options.compilerArgs += [
    '-Xlint:all',
    '-Werror'
]

javadoc {
   options.memberLevel = JavadocMemberLevel.PUBLIC
}

/* Modify the Eclipse project settings. */
eclipse { jdt { file { withProperties eclipsePrefs } } }

task copyEclipsePrefs(type: Copy) {
    from rootProject.file('resources/eclipse/org.eclipse.jdt.ui.prefs')
    into "${projectDir}/.settings"
}
tasks.eclipse.finalizedBy copyEclipsePrefs

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
}

task testSourcesJar(type: Jar) {
    from sourceSets.test.allSource
    archiveClassifier = 'test-sources'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

artifacts {
    archives javadocJar, sourcesJar, testSourcesJar
}

// Requirements:
//
// - Get public key ID `gpg --list-keys --keyid-format SHORT`
// - Export key `gpg --keyring secring.gpg --export-secret-keys > ~/.gnupg/secring.gpg`
// - Add the following properties to ~/.gradle/gradle.properties
//      signing.keyId=0ABCDEF
//      signing.password=password
//      signing.secretKeyRingFile=/absolute/path/to/.gnupg/secring.gpg
//
def isSnapshot = project.version.toString().endsWith("-SNAPSHOT")
def isCiEnv = System.getenv("CI") ?: false
signing {
    required { !(isSnapshot || isCiEnv) }
    sign configurations.archives
}

// Requirements:
//
// - Add the following properties to ~/.gradle/gradle.properties
//     ossrhUsername=<username>
//     ossrhPassword=<password>
// - Or pass the credentials as command line parameters
//     ./gradlew uploadArchives -PossrhUsername=<my-username> -PossrhPassword=<my-password>
//
uploadArchives {
    repositories {
        mavenDeployer {

            def sonatypeUser = findProperty("ossrhUsername")
            def sonatypePass = findProperty("ossrhPassword")

            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: sonatypeUser, password: sonatypePass)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: sonatypeUser, password: sonatypePass)
            }

            // Generate Sonatype conform .pom for Bintray Maven-sync, see https://central.sonatype.org/pages/requirements.html
            pom.project {
                name = project.name
                description = "An implementation of Multicast DNS Service Discovery in Java"
                url = 'https://github.com/ofmooseandmen/halo'
                inceptionYear  ='2018'
                licenses {
                    license {
                        name = 'The 3-Clause BSD License'
                        url = 'https://opensource.org/licenses/BSD-3-Clause'
                    }
                }
                developers {
                    developer {
                        id = 'ofmooseandmen'
                        name = 'Cedric Liegeois'
                        email = 'ofmooseandmen@yahoo.com'
                    }
                }
                scm {
                    connection 'scm:https://ofmooseandmen@github.com/ofmooseandmen/halo.git'
                    developerConnection 'scm:git://github.com/ofmooseandmen/halo.git'
                    url 'https://github.com/ofmooseandmen/halo'
                }
            }
        }
    }
}
